/**
 * Firebase Cloud Messaging (FCM) Console Logger
 * 
 * A utility for debugging and monitoring FCM operations with enhanced console logging.
 * Provides formatted and colored logs for various FCM events, status updates, and errors.
 */

class FCMLogger {
  constructor(options = {}) {
    this.options = {
      enableLogs: true,
      logLevel: 'info', // 'debug', 'info', 'warn', 'error'
      showTimestamp: true,
      coloredOutput: true,
      prefix: 'FCM',
      ...options
    };

    this.logLevels = {
      debug: 0,
      info: 1,
      warn: 2,
      error: 3
    };

    this.colors = {
      reset: '\x1b[0m',
      black: '\x1b[30m',
      red: '\x1b[31m',
      green: '\x1b[32m',
      yellow: '\x1b[33m',
      blue: '\x1b[34m',
      magenta: '\x1b[35m',
      cyan: '\x1b[36m',
      white: '\x1b[37m',
      bgRed: '\x1b[41m',
      bgGreen: '\x1b[42m',
      bgYellow: '\x1b[43m',
      bgBlue: '\x1b[44m'
    };
  }

  _shouldLog(level) {
    if (!this.options.enableLogs) return false;
    return this.logLevels[level] >= this.logLevels[this.options.logLevel];
  }

  _formatTimestamp() {
    if (!this.options.showTimestamp) return '';
    const now = new Date();
    return `[${now.toISOString()}] `;
  }

  _formatPrefix() {
    return `[${this.options.prefix}] `;
  }

  _colorize(text, color) {
    if (!this.options.coloredOutput) return text;
    return `${this.colors[color]}${text}${this.colors.reset}`;
  }

  _log(level, message, data = null) {
    if (!this._shouldLog(level)) return;

    const timestamp = this._formatTimestamp();
    const prefix = this._formatPrefix();
    let logMethod = console.log;
    let color = 'white';

    switch (level) {
      case 'debug':
        logMethod = console.debug;
        color = 'cyan';
        break;
      case 'info':
        logMethod = console.info;
        color = 'green';
        break;
      case 'warn':
        logMethod = console.warn;
        color = 'yellow';
        break;
      case 'error':
        logMethod = console.error;
        color = 'red';
        break;
    }

    const levelText = this._colorize(`[${level.toUpperCase()}]`, color);
    const logPrefix = `${timestamp}${prefix}${levelText}`;

    if (data) {
      logMethod(`${logPrefix} ${message}`);
      console.dir(data, { depth: null, colors: this.options.coloredOutput });
    } else {
      logMethod(`${logPrefix} ${message}`);
    }
  }

  debug(message, data = null) {
    this._log('debug', message, data);
  }

  info(message, data = null) {
    this._log('info', message, data);
  }

  warn(message, data = null) {
    this._log('warn', message, data);
  }

  error(message, data = null) {
    this._log('error', message, data);
  }

  // FCM specific logging methods
  tokenRegistered(token) {
    this.info('FCM Token registered', { token });
  }

  tokenRefreshed(oldToken, newToken) {
    this.info('FCM Token refreshed', { oldToken, newToken });
  }

  messageReceived(message) {
    this.info('FCM Message received', message);
  }

  notificationDisplayed(notification) {
    this.info('FCM Notification displayed', notification);
  }

  notificationClicked(notification) {
    this.info('FCM Notification clicked', notification);
  }

  permissionRequested(status) {
    this.info('FCM Permission requested', { status });
  }

  permissionChanged(status) {
    this.info('FCM Permission changed', { status });
  }

  subscribeToTopic(topic) {
    this.info(`Subscribed to topic: ${topic}`);
  }

  unsubscribeFromTopic(topic) {
    this.info(`Unsubscribed from topic: ${topic}`);
  }

  initializationSuccess() {
    this.info('FCM initialized successfully');
  }

  initializationError(error) {
    this.error('FCM initialization failed', error);
  }

  serviceWorkerRegistered(registration) {
    this.info('Service Worker registered for FCM', registration);
  }

  serviceWorkerError(error) {
    this.error('Service Worker registration failed', error);
  }
}

/**
 * FCM Logger Integration Example
 * 
 * This example shows how to integrate the FCMLogger with Firebase Cloud Messaging.
 */

// Example usage with Firebase
function initializeFCMWithLogger() {
  // Create a logger instance
  const fcmLogger = new FCMLogger({
    logLevel: 'debug',
    coloredOutput: true
  });
  
  // Log initialization
  fcmLogger.debug('Initializing Firebase Cloud Messaging');
  
  // Example Firebase initialization
  if (firebase && firebase.messaging) {
    try {
      const messaging = firebase.messaging();
      
      // Request permission
      messaging.requestPermission()
        .then(() => {
          fcmLogger.permissionRequested('granted');
          
          // Get FCM token
          return messaging.getToken();
        })
        .then((token) => {
          fcmLogger.tokenRegistered(token);
        })
        .catch((error) => {
          fcmLogger.error('Permission request failed', error);
        });
      
      // Token refresh handling
      messaging.onTokenRefresh(() => {
        messaging.getToken()
          .then((refreshedToken) => {
            fcmLogger.tokenRefreshed('old-token-not-available', refreshedToken);
          })
          .catch((error) => {
            fcmLogger.error('Token refresh failed', error);
          });
      });
      
      // Foreground message handling
      messaging.onMessage((payload) => {
        fcmLogger.messageReceived(payload);
      });
      
      fcmLogger.initializationSuccess();
    } catch (error) {
      fcmLogger.initializationError(error);
    }
  } else {
    fcmLogger.error('Firebase Messaging not available');
  }
  
  return fcmLogger;
}

// Export the FCMLogger class and initialization function
export { FCMLogger, initializeFCMWithLogger };